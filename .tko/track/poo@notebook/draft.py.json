{
    "patches": [
        {
            "label": "2025-10-16_12-08-50",
            "content": "@@ -1,3504 +0,0 @@\n-class Bateria:%0A    def __init__(self, capacidade: int):%0A        self.__capacidade = capacidade%0A        self.__carga = capacidade%0A%0A    def getCapacidade(self):%0A        return self.__capacidade%0A%0A    def mostrar(self):%0A        status = %22ligado%22 if self.__ligado else %22desligado%22%0A        print(f%22status: %7Bstatus%7D%22)%0A%0A    def getCarga(self):%0A        return self.__carga%0A%0A    def setCarga(self, valor):%0A        if 0 %3C= valor %3C= self.__capacidade:%0A            self.__carga = valor%0A        else:%0A            print(%22fail: valor de carga inv%C3%A1lido%22)%0A%0A    def descarregar(self, tempo):%0A        self.__carga -= tempo%0A        if self.__carga %3C 0:%0A            self.__carga = 0%0Aclass Notebook:%0A    def __init__(self):%0A        self.__ligado : bool = False%0A        self.__bateria: Bateria %7C None = None %0A        self.__carregador: Carregador %7C None = None %0A%0A    def getLigado(self):%0A        return self.__ligado%0A%0A    def setLigado(self, valor: bool):%0A        self.__ligado = valor%0A%0A    def ligar(self):%0A        if not self.__ligado:%0A            self.__ligado = True%0A            print(%22notebook ligado%22)%0A        else:%0A            print(%22notebook j%C3%A1 est%C3%A1 ligado%22)%0A%0A    def desligar(self):%0A        if self.__ligado:%0A            self.__ligado =  False%0A            print(%22notebook desligado%22)%0A        else:%0A            print(%22notebook j%C3%A1 est%C3%A1 desligado%22)%0A%0A    def mostrar(self):%0A        status = %22ligado%22 if self.__ligado else %22desligado%22%0A        print(f%22status: %7Bstatus%7D%22)%0A%0A    def usar(self, tempo):%0A        if self.__ligado:%0A            print(f%22usando por %7Btempo%7D minutos%22)%0A        else:%0A            print(%22erro: ligue o notebook primeiro%22)%0A%0Aclass Carregador:%0A    def __init__(self, potencia: int):%0A        self.__potencia = potencia%0A%0A    def getPotencia(self):%0A        return self.__potencia%0A%0Anotebook = Notebook() # criando notebook%0Anotebook.mostrar()    # msg: Status: Desligado, Bateria: Nenhuma, Carregador: Desconectado%0Anotebook.ligar()      # msg: n%C3%A3o foi poss%C3%ADvel ligar%0Anotebook.usar(10)     # msg: notebook desligado%0A%0Abateria = Bateria(50) # criando bateria que suporta 50 minutos e come%C3%A7a carregada%0Abateria.mostrar()     # (50/50)%0Anotebook.setBateria(bateria) # coloca a bateria no notebook%0A%0Anotebook.mostrar() # msg: Status: Desligado, Bateria: (50/50), Carregador: Desconectado%0Anotebook.ligar()   # msg: notebook ligado%0Anotebook.mostrar() # msg: Status: Ligado, Bateria: (50/50), Carregador: Desconectado%0Anotebook.usar(30)  # msb: Usando por 30 minutos%0Anotebook.mostrar() # msg: Status: Ligado, Bateria: (20/50), Carregador: Desconectado%0Anotebook.usar(30)  # msb: Usando por 20 minutos, notebook descarregou%0Anotebook.mostrar() # msg: Status: Desligado, Bateria: (0/50), Carregador: Desconectado%0A%0Abateria = notebook.rmBateria() # msg: bateria removida%0Abateria.mostrar()  # (0/50)%0Anotebook.mostrar() # msg: Status: Desligado, Bateria: Nenhuma, Carregador: Desconectado%0A%0Acarregador = Carregador(2) # criando carregador com 2 de potencia%0Acarregador.mostrar() # (Pot%C3%AAncia 2)%0A%0Anotebook.setCarregador(carregador) # adicionando carregador no notebook%0Anotebook.mostrar() # msg: Status: Desligado, Bateria: Nenhuma, Carregador: (Pot%C3%AAncia 2)%0Anotebook.ligar()   # msg: notebook ligado%0Anotebook.mostrar() # msg: Status: Ligado, Bateria: Nenhuma, Carregador: (Pot%C3%AAncia 2)%0A%0Anotebook.setBateria(bateria)%0Anotebook.mostrar() # msg: Status: Ligado, Bateria: (0/50), Carregador: (Pot%C3%AAncia 2)%0Anotebook.usar(10)  # msg: Notebook utilizado com sucesso%0Anotebook.mostrar() # msg: Status: Ligado, Bateria: (20/50), Carregador: (Pot%C3%AAncia 2)\n",
            "lines": "0"
        },
        {
            "label": "2025-10-21_00-38-45",
            "content": "class Bateria:\n    def __init__(self, capacidade: int):\n        self.__capacidade = capacidade\n        self.__carga = capacidade\n\n    def getCapacidade(self):\n        return self.__capacidade\n\n    def mostrar(self):\n        status = \"ligado\" if self.__ligado else \"desligado\"\n        print(f\"status: {status}\")\n\n    def getCarga(self):\n        return self.__carga\n\n    def setCarga(self, valor):\n        if 0 <= valor <= self.__capacidade:\n            self.__carga = valor\n        else:\n            print(\"fail: valor de carga inv\u00e1lido\")\n\n    def descarregar(self, tempo):\n        self.__carga -= tempo\n        if self.__carga < 0:\n            self.__carga = 0\nclass Notebook:\n    def __init__(self):\n        self.__ligado : bool = False\n        self.__bateria: Bateria | None = None \n        self.__carregador: Carregador | None = None \n\n    def getLigado(self):\n        return self.__ligado\n\n    def setLigado(self, valor: bool):\n        self.__ligado = valor\n\n    def ligar(self):\n        if not self.__ligado:\n            self.__ligado = True\n            print(\"notebook ligado\")\n        else:\n            print(\"notebook j\u00e1 est\u00e1 ligado\")\n\n    def desligar(self):\n        if self.__ligado:\n            self.__ligado =  False\n            print(\"notebook desligado\")\n        else:\n            print(\"notebook j\u00e1 est\u00e1 desligado\")\n\n    def mostrar(self):\n        status = \"ligado\" if self.__ligado else \"desligado\"\n        print(f\"status: {status}\")\n\n    def usar(self, tempo):\n        if self.__ligado:\n            print(f\"usando por {tempo} minutos\")\n        else:\n            print(\"erro: ligue o notebook primeiro\")\n\nclass Carregador:\n    def __init__(self, potencia: int):\n        self.__potencia = potencia\n\n    def getPotencia(self):\n        return self.__potencia\n\nnotebook = Notebook() # criando notebook\nnotebook.mostrar()    # msg: Status: Desligado, Bateria: Nenhuma, Carregador: Desconectado\nnotebook.ligar()      # msg: n\u00e3o foi poss\u00edvel ligar\nnotebook.usar(10)     # msg: notebook desligado\n\nbateria = Bateria(50) # criando bateria que suporta 50 minutos e come\u00e7a carregada\nbateria.mostrar()     # (50/50)\nnotebook.setBateria(bateria) # coloca a bateria no notebook\n\nnotebook.mostrar() # msg: Status: Desligado, Bateria: (50/50), Carregador: Desconectado\nnotebook.ligar()   # msg: notebook ligado\nnotebook.mostrar() # msg: Status: Ligado, Bateria: (50/50), Carregador: Desconectado\nnotebook.usar(30)  # msb: Usando por 30 minutos\nnotebook.mostrar() # msg: Status: Ligado, Bateria: (20/50), Carregador: Desconectado\nnotebook.usar(30)  # msb: Usando por 20 minutos, notebook descarregou\nnotebook.mostrar() # msg: Status: Desligado, Bateria: (0/50), Carregador: Desconectado\n\nbateria = notebook.rmBateria() # msg: bateria removida\nbateria.mostrar()  # (0/50)\nnotebook.mostrar() # msg: Status: Desligado, Bateria: Nenhuma, Carregador: Desconectado\n\ncarregador = Carregador(2) # criando carregador com 2 de potencia\ncarregador.mostrar() # (Pot\u00eancia 2)\n\nnotebook.setCarregador(carregador) # adicionando carregador no notebook\nnotebook.mostrar() # msg: Status: Desligado, Bateria: Nenhuma, Carregador: (Pot\u00eancia 2)\nnotebook.ligar()   # msg: notebook ligado\nnotebook.mostrar() # msg: Status: Ligado, Bateria: Nenhuma, Carregador: (Pot\u00eancia 2)\n\nnotebook.setBateria(bateria)\nnotebook.mostrar() # msg: Status: Ligado, Bateria: (0/50), Carregador: (Pot\u00eancia 2)\nnotebook.usar(10)  # msg: Notebook utilizado com sucesso\nnotebook.mostrar() # msg: Status: Ligado, Bateria: (20/50), Carregador: (Pot\u00eancia 2)",
            "lines": "101"
        }
    ]
}